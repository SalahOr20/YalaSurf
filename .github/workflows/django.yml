name: Django CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    timeout-minutes: 30  # Temps maximum alloué au job
    strategy:
      max-parallel: 3
      matrix:
        python-version: [3.8, 3.9, 3.10]

    services:
      db:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_db
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
        ports:
          - 3306:3306

    steps:
    - name: Check out the repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt  # Assurez-vous du bon chemin du fichier requirements.txt

    - name: Wait for MySQL to be ready
      run: |
        until mysqladmin ping --host=127.0.0.1 --user=root --password=root --silent; do
          echo "Waiting for MySQL..."
          sleep 5
        done

    - name: Apply migrations
      run: |
        python manage.py migrate
      working-directory: ./backend  # Chemin vers le backend

    - name: Run tests
      run: |
        python manage.py test
      working-directory: ./backend  # Chemin vers le backend

    - name: Upload test results (optional)
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: test-results
        path: backend/test-results/  # Mettez à jour le chemin si vous générez des rapports de tests
